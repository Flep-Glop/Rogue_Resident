/* character_sprites.css - Styling for character sprites and animations */

/*
* CHARACTER SPRITE CONTAINER
* Main container for character sprite images
*/
.character-sprite-container {
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  overflow: hidden;
  position: relative;
}

/* Support for wider sprite sheets */
.character-sprite-container--wide {
  width: auto !important; /* Allow natural width */
  max-width: none !important; /* Ensure no constraints */
  transform-origin: center center;
  z-index: var(--z-game-element); /* Ensure it appears above other elements */
}

/*
* CHARACTER AVATAR
* Visual representation of player characters
*/
.character-avatar {
  width: 120px;
  height: 120px;
  display: flex;
  justify-content: center;
  align-items: center;
  position: relative;
  overflow: hidden; /* Default to hidden overflow */
  background-color: var(--dark-alt);
  border-radius: var(--border-radius-sm);
}

/* Allow container to expand during ability animations */
.character-avatar--ability-mode {
  overflow: visible !important;
  z-index: var(--z-game-element);
}

/*
* SPRITE ELEMENTS
* Core sprite image styling
*/
.character-sprite {
  image-rendering: pixelated;
  image-rendering: crisp-edges;
  -webkit-font-smoothing: none;
  transform-origin: center center !important;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%) scale(1); /* Default scale */
}

/* When scaling is applied via JS, transform will combine scaling with centering */
.character-sprite[style*="scale"] {
  transform: translate(-50%, -50%) scale(var(--character-scale, 1));
}

/*
* SINGLE IMAGE SPRITES
* Styling for static GIF-based animations
*/
.character-animation-gif {
  image-rendering: pixelated;
  image-rendering: crisp-edges;
  -webkit-font-smoothing: none;
  transform-origin: center center !important;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%) scale(1);
}

.character-animation-gif[style*="scale"] {
  transform: translate(-50%, -50%) scale(var(--character-scale, 1));
}

/*
* ANIMATION CONTROLS
* UI for manually triggering animations
*/
.animation-controls {
  display: flex;
  justify-content: center;
  gap: var(--spacing-sm);
  margin-top: var(--spacing-sm);
}

.animation-controls button {
  background-color: var(--dark);
  color: var(--text);
  border: 1px solid var(--primary);
  border-radius: var(--border-radius-sm);
  padding: 4px 8px;
  font-size: var(--font-size-xs);
  cursor: pointer;
  transition: all var(--transition-fast);
}

.animation-controls button:hover {
  background-color: var(--primary);
  color: white;
}

.animation-controls button:active {
  transform: translateY(1px);
}

/*
* SPECIFIC ANIMATION KEYFRAMES
* Animation patterns for different character states
*/

/* Idle animation - gentle bobbing */
@keyframes character-idle {
  0% { transform: translateY(0); }
  50% { transform: translateY(-2px); }
  100% { transform: translateY(0); }
}

/* Walking animation for sprite sheets */
@keyframes character-walking {
  from { background-position: 0% 0; }
  to { background-position: -400% 0; } /* For 4-frame animations */
}

/* Ability animation for sprite sheets */
@keyframes character-ability {
  from { background-position: 0% 0; }
  to { background-position: -600% 0; } /* For 6-frame animations */
}

/* Special ability animation for wide sprite sheets */
@keyframes character-special-ability {
  from { background-position: 0% 0; }
  to { background-position: -1000% 0; } /* For 10-frame animations */
}

/* Character hit animation */
@keyframes character-hit {
  0% { filter: none; transform: translateX(0); }
  25% { filter: brightness(1.5) saturate(1.5); transform: translateX(-2px); }
  50% { filter: brightness(1.2) saturate(1.2); transform: translateX(2px); }
  75% { filter: brightness(1.3) saturate(1.3); transform: translateX(-1px); }
  100% { filter: none; transform: translateX(0); }
}

/*
* ANIMATION STATES
* Class-based animation triggers
*/
.character--idle {
  animation: character-idle var(--animation-medium) ease-in-out infinite;
}

.character--walking {
  animation: character-walking 0.8s steps(4) infinite;
}

.character--ability {
  animation: character-ability 0.6s steps(6) forwards;
}

.character--special-ability {
  animation: character-special-ability 0.8s steps(10) forwards;
}

/* Character hit animation */
.character--hit {
  animation: character-hit var(--transition-fast) ease-in-out;
}

/* Animation for ability activation */
.ability-flash {
  animation: ability-flash var(--transition-medium) ease-in-out;
}

@keyframes ability-flash {
  0% { filter: brightness(1); }
  50% { filter: brightness(1.5) saturate(1.5); }
  100% { filter: brightness(1); }
}

/*
* SPECIAL EFFECTS
* Visual enhancements for abilities
*/
.ability-glow {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  pointer-events: none;
  background: radial-gradient(
    ellipse at center,
    rgba(93, 156, 255, 0.3) 0%,
    rgba(93, 156, 255, 0) 70%
  );
  opacity: 0;
  transition: opacity var(--transition-fast);
}

.ability-active .ability-glow {
  opacity: 1;
  animation: pulse-opacity var(--animation-medium) infinite;
}

/*
* RESPONSIVE ADJUSTMENTS
* Scaling for different screen sizes
*/
@media (max-width: var(--breakpoint-md)) {
  .character-avatar {
    width: 80px;
    height: 80px;
  }
  
  .animation-controls button {
    font-size: calc(var(--font-size-xs) - 1px);
    padding: 3px 6px;
  }
}

/*
* SPECIFIC CHARACTER DIMENSIONS
* Dimensions to match frame sizes
*/
.character-avatar--physic {
  width: 97px;
  height: 108px;
  overflow: hidden;
}

/*
* DEBUG STYLING
* Visual indicators when in debug mode
*/
.debug-mode .character-avatar {
  border: 2px solid var(--primary) !important;
  background-color: rgba(93, 156, 255, 0.1) !important;
}

.debug-mode .sprite-outer-container {
  background-color: rgba(0, 0, 0, 0.2);
}

/* Reduced motion support */
@media (prefers-reduced-motion: reduce) {
  .character--idle,
  .character--walking,
  .character--ability,
  .character--special-ability,
  .character--hit,
  .ability-flash,
  .ability-active .ability-glow {
    animation: none !important;
  }
}